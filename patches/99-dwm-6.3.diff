diff --git a/config.h.old b/config.h
index a464624..61087f3 100644
--- a/config.def.h
+++ b/config.def.h
@@ -1,20 +1,23 @@
 /* See LICENSE file for copyright and license details. */
 
+/* imports */ 
+#include <X11/XF86keysym.h>
+
 /* appearance */
-static const unsigned int borderpx  = 1;        /* border pixel of windows */
+static const unsigned int borderpx  = 0;        /* border pixel of windows */
 static const unsigned int snap      = 32;       /* snap pixel */
 static const int swallowfloating    = 0;        /* 1 means swallow floating windows by default */
 static const unsigned int gappih    = 20;       /* horiz inner gap between windows */
-static const unsigned int gappiv    = 10;       /* vert inner gap between windows */
-static const unsigned int gappoh    = 10;       /* horiz outer gap between windows and screen edge */
+static const unsigned int gappiv    = 20;       /* vert inner gap between windows */
+static const unsigned int gappoh    = 30;       /* horiz outer gap between windows and screen edge */
 static const unsigned int gappov    = 30;       /* vert outer gap between windows and screen edge */
 static       int smartgaps          = 0;        /* 1 means no outer gap when there is only one window */
 static const int showbar            = 1;        /* 0 means no bar */
 static const int topbar             = 1;        /* 0 means bottom bar */
-static const int vertpad            = 10;       /* vertical padding of bar */
-static const int sidepad            = 10;       /* horizontal padding of bar */
-static const char *fonts[]          = { "monospace:size=10" };
-static const char dmenufont[]       = "monospace:size=10";
+static const int vertpad            = 5;       /* vertical padding of bar */
+static const int sidepad            = 30;       /* horizontal padding of bar */
+static const char *fonts[]          = { "Liberation Sans:style=Bold:pixelsize=14", "Symbols Nerd Font Mono:size=8", "Noto Color Emoji:size=8", "monospace:size=10" };
+static const char dmenufont[]       = { "Liberation Sans:style=Bold:pixelsize=14", "Symbols Nerd Font Mono:size=8", "Noto Color Emoji:size=8", "monospace:size=10" };
 static char normbgcolor[]           = "#222222";
 static char normbordercolor[]       = "#444444";
 static char normfgcolor[]           = "#bbbbbb";
@@ -31,7 +28,7 @@ static char *colors[][3] = {
 };

 /* tagging */
-static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };
+static const char *tags[] = { "", "", "", "󰊗", "", "", "", "󰙯", "󰌳" };

 static const Rule rules[] = {
        /* xprop(1):
@@ -36,9 +39,30 @@ static const Rule rules[] = {
 	 *	WM_NAME(STRING) = title
 	 */
 	/* class     instance  title           tags mask  isfloating  isterminal  noswallow  monitor */
-	{ "Gimp",    NULL,     NULL,           0,         1,          0,           0,        -1 },
-	{ "Firefox", NULL,     NULL,           1 << 8,    0,          0,          -1,        -1 },
-	{ "St",      NULL,     NULL,           0,         0,          1,           0,        -1 },
+  { "st-256color", NULL, NULL, 	  0,          0,          1,           0,        -1 },
+  	/* floating rules */
+  { "Thunar",  NULL,     NULL,           0,          1,          0,           0,        -1 },
+  { "Wpg",     NULL,     NULL,  	  0,          1,          0,           0,        -1 },
+  { "Pavucontrol", NULL, NULL,           0,   	      1,          0,           0,        -1 },
+  { "System-config-printer.py", NULL, NULL, 0,       1,          0,           0,        -1 },
+  { "st-256color", NULL, "pomo",  	  0,          1,          0,           0,        -1 },
+  { "QjackCtl", NULL, 	  NULL,  	  0,          1,          0,           0,        -1 },
+  { "org.gnome.Weather", NULL, NULL,  	  0,          1,          0,           0,        -1 },
+  { "gnome-calculator", NULL, NULL,  	  0,          1,          0,           0,        -1 },
+  { "Gnome-sudoku", NULL, NULL,  	  0,          1,          0,           0,        -1 },
+  { "Gnome-mines", NULL, NULL,  	  0,          1,          0,           0,        -1 },
+  { NULL, NULL, "cmus-cover-art",	  0,          1,          0,           0,        -1 },
+  	/* tags rules */
+  { "Houdoku", NULL,     NULL,           1 << 2,     0,          0,           0,        -1 },
+  { "komikku", NULL,     NULL,           1 << 2,     0,          0,           0,        -1 },
+  { "Trackma-gtk", NULL, NULL,           1 << 2,     1,          0,           0,        -1 },
+  { "Steam",   NULL,     NULL,           1 << 3,     0,          0,           0,        -1 },
+  { "dotnet",  NULL,   "osu!",           1 << 3,     0,          0,           0,        -1 },
+  { "st-256color", NULL, "emerge", 	  1 << 6,     1,          0,           0,        -1 },
+  { "discord", NULL,     NULL,           1 << 7,     0,          0,           0,         1 },
+  { "Spotify", NULL,     NULL,           1 << 8,     0,          0,           0,         1 }, /* 0 -> primary monitor, 1 -> secondary monitor, -1 -> focused monitor */
+  { "broken",  "broken", NULL,           1 << 8,     0,          0,           0,         1 }, /* spotify starts up with no window title, neither class / instance */
+  { "amberol", NULL,     NULL, 	  1 << 8,     1,          0,           0,         1 },
 	{ NULL,      NULL,     "Event Tester", 0,         0,          0,           1,        -1 }, /* xev */
 };

@@ -55,23 +65,24 @@ static const Layout layouts[] = {
 	/* symbol     arrange function */
 	{ "[]=",      tile },    /* first entry is default */
 	{ "[M]",      monocle },
-        { "[@]",      spiral },
-        { "[\\]",     dwindle },
-        { "H[]",      deck },
-        { "TTT",      bstack },
-        { "===",      bstackhoriz },
-        { "HHH",      grid },
-        { "###",      nrowgrid },
-        { "---",      horizgrid },
-        { ":::",      gaplessgrid },
-        { "|M|",      centeredmaster },
-        { ">M>",      centeredfloatingmaster },
-        { "><>",      NULL },    /* no layout function means floating behavior */
-        { NULL,       NULL },
+  { "[@]",      spiral },
+  { "[\\]",     dwindle },
+  { "H[]",      deck },
+  { "TTT",      bstack },
+  { "===",      bstackhoriz },
+  { "HHH",      grid },
+  { "###",      nrowgrid },
+  { "---",      horizgrid },
+  { ":::",      gaplessgrid },
+  { "|M|",      centeredmaster },
+  { ">M>",      centeredfloatingmaster },
+  { "><>",      NULL },    /* no layout function means floating behavior */
+  { NULL,       NULL },
 };
 
 /* key definitions */
-#define MODKEY Mod1Mask
+#define MODKEY Mod4Mask
+#define MODKEY2 Mod1Mask
 #define TAGKEYS(KEY,TAG) \
 	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
 	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
@@ -91,9 +102,35 @@ static const Layout layouts[] = {
 
 /* commands */
 static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
-static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", normbgcolor, "-nf", normfgcolor, "-sb", selbordercolor, "-sf", selfgcolor, NULL };
+static const char *dmenucmd[] = { "dmenu_run", "-i", NULL }; /* -i for case insensitive */
 static const char *termcmd[]  = { "st", NULL };
+static const char *doff[] = { "/home/kumao/.local/bin/doff", NULL };
+static const char *lock[] = { "/home/kumao/.local/bin/klock", NULL };
+static const char *browser[] = { "/usr/bin/librewolf", NULL };
+static const char *discord[] = { "/usr/bin/discord", NULL };
+static const char *spotify[] = { "/usr/bin/spotify", NULL };
+static const char *thunar[] = { "/usr/bin/thunar", NULL };
+static const char *pavucontrol[] = { "/usr/bin/pavucontrol", NULL };
 
+/* volume */
+static const char *upvol[] = { "/home/kumao/.local/bin/kvolume", "-i", "5", NULL };
+static const char *upvol1[] = { "/home/kumao/.local/bin/kvolume", "-i", "1", NULL };
+static const char *downvol[] = { "/home/kumao/.local/bin/kvolume", "-d", "5", NULL };
+static const char *downvol1[] = { "/home/kumao/.local/bin/kvolume", "-d", "1", NULL };
+static const char *mutevol[] = { "/home/kumao/.local/bin/kmute", NULL };
+
+/* backlight */
+static const char *lightup[] = { "/home/kumao/.local/bin/klight", "+10%", NULL };
+static const char *lightdown[] = { "/home/kumao/.local/bin/klight", "10%-", NULL };
+static const char *lightupsec[] = { "/home/kumao/.local/bin/klight", "+10%", "secondary", NULL };
+static const char *lightdownsec[] = { "/home/kumao/.local/bin/klight", "10%-", "secondary", NULL };
+
+/* player */
+static const char *aprev[] = { "/usr/bin/playerctl", "previous", NULL };
+static const char *aplay[] = { "/home/kumao/.local/bin/play-pause", NULL };
+static const char *anext[] = { "/usr/bin/playerctl", "next", NULL };
+
+
 static Key keys[] = {
 	/* modifier                     key        function        argument */
 	{ MODKEY,                       XK_p,      spawn,          {.v = dmenucmd } },
@@ -109,22 +139,22 @@ static Key keys[] = {
 	{ MODKEY|ShiftMask,             XK_l,      setcfact,       {.f = -0.25} },
 	{ MODKEY|ShiftMask,             XK_o,      setcfact,       {.f =  0.00} },
 	{ MODKEY,                       XK_Return, zoom,           {0} },
-	{ MODKEY|Mod4Mask,              XK_u,      incrgaps,       {.i = +1 } },
-	{ MODKEY|Mod4Mask|ShiftMask,    XK_u,      incrgaps,       {.i = -1 } },
-	{ MODKEY|Mod4Mask,              XK_i,      incrigaps,      {.i = +1 } },
-	{ MODKEY|Mod4Mask|ShiftMask,    XK_i,      incrigaps,      {.i = -1 } },
-	{ MODKEY|Mod4Mask,              XK_o,      incrogaps,      {.i = +1 } },
-	{ MODKEY|Mod4Mask|ShiftMask,    XK_o,      incrogaps,      {.i = -1 } },
-	{ MODKEY|Mod4Mask,              XK_6,      incrihgaps,     {.i = +1 } },
-	{ MODKEY|Mod4Mask|ShiftMask,    XK_6,      incrihgaps,     {.i = -1 } },
-	{ MODKEY|Mod4Mask,              XK_7,      incrivgaps,     {.i = +1 } },
-	{ MODKEY|Mod4Mask|ShiftMask,    XK_7,      incrivgaps,     {.i = -1 } },
-	{ MODKEY|Mod4Mask,              XK_8,      incrohgaps,     {.i = +1 } },
-	{ MODKEY|Mod4Mask|ShiftMask,    XK_8,      incrohgaps,     {.i = -1 } },
-	{ MODKEY|Mod4Mask,              XK_9,      incrovgaps,     {.i = +1 } },
-	{ MODKEY|Mod4Mask|ShiftMask,    XK_9,      incrovgaps,     {.i = -1 } },
-	{ MODKEY|Mod4Mask,              XK_0,      togglegaps,     {0} },
-	{ MODKEY|Mod4Mask|ShiftMask,    XK_0,      defaultgaps,    {0} },
+	{ MODKEY|MODKEY2,              XK_u,      incrgaps,       {.i = +1 } },
+	{ MODKEY|MODKEY2|ShiftMask,    XK_u,      incrgaps,       {.i = -1 } },
+	{ MODKEY|MODKEY2,              XK_i,      incrigaps,      {.i = +1 } },
+	{ MODKEY|MODKEY2|ShiftMask,    XK_i,      incrigaps,      {.i = -1 } },
+	{ MODKEY|MODKEY2,              XK_o,      incrogaps,      {.i = +1 } },
+	{ MODKEY|MODKEY2|ShiftMask,    XK_o,      incrogaps,      {.i = -1 } },
+	{ MODKEY|MODKEY2,              XK_6,      incrihgaps,     {.i = +1 } },
+	{ MODKEY|MODKEY2|ShiftMask,    XK_6,      incrihgaps,     {.i = -1 } },
+	{ MODKEY|MODKEY2,              XK_7,      incrivgaps,     {.i = +1 } },
+	{ MODKEY|MODKEY2|ShiftMask,    XK_7,      incrivgaps,     {.i = -1 } },
+	{ MODKEY|MODKEY2,              XK_8,      incrohgaps,     {.i = +1 } },
+	{ MODKEY|MODKEY2|ShiftMask,    XK_8,      incrohgaps,     {.i = -1 } },
+	{ MODKEY|MODKEY2,              XK_9,      incrovgaps,     {.i = +1 } },
+	{ MODKEY|MODKEY2|ShiftMask,    XK_9,      incrovgaps,     {.i = -1 } },
+	{ MODKEY|MODKEY2,              XK_0,      togglegaps,     {0} },
+	{ MODKEY|MODKEY2|ShiftMask,    XK_0,      defaultgaps,    {0} },
 	{ MODKEY,                       XK_Tab,    view,           {0} },
 	{ MODKEY|ShiftMask,             XK_Tab,       shiftviewclients, { .i = +1 } },
 	{ MODKEY|ShiftMask,             XK_backslash, shiftviewclients, { .i = -1 } },
@@ -135,7 +165,7 @@ static Key keys[] = {
 	{ MODKEY,                       XK_u,      setlayout,      {.v = &layouts[11]} },
 	{ MODKEY,                       XK_o,      setlayout,      {.v = &layouts[12]} },
 	{ MODKEY,                       XK_r,      setlayout,      {.v = &layouts[4]} },
-	{ MODKEY|ControlMask,		XK_comma,  cyclelayout,    {.i = -1 } },
+	{ MODKEY|ControlMask,		XK_comma,  cyclelayout,    {.i = -1 } },
 	{ MODKEY|ControlMask,           XK_period, cyclelayout,    {.i = +1 } },
 	{ MODKEY,                       XK_space,  setlayout,      {0} },
 	{ MODKEY|ShiftMask,             XK_space,  togglefloating, {0} },
@@ -147,16 +177,16 @@ static Key keys[] = {
 	{ MODKEY,                       XK_period, focusmon,       {.i = +1 } },
 	{ MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
 	{ MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
-	{ MODKEY,                       XK_F5,     xrdb,           {.v = NULL } },
-	{ MODKEY, 			XK_KP_End,    movetoedge,       {.v = "-1 1" } },
-	{ MODKEY, 			XK_KP_Down,   movetoedge,       {.v = "0 1" } },
-	{ MODKEY, 			XK_KP_Next,   movetoedge,       {.v = "1 1" } },
-	{ MODKEY, 			XK_KP_Left,   movetoedge,       {.v = "-1 0" } },
-	{ MODKEY, 			XK_KP_Begin,  movetoedge,       {.v = "0 0" } },
-	{ MODKEY, 			XK_KP_Right,  movetoedge,       {.v = "1 0" } },
-	{ MODKEY, 			XK_KP_Home,   movetoedge,       {.v = "-1 -1" } },
-	{ MODKEY, 			XK_KP_Up,     movetoedge,       {.v = "0 -1" } },
-	{ MODKEY, 			XK_KP_Prior,  movetoedge,       {.v = "1 -1" } },
+	{ MODKEY|MODKEY2|ShiftMask,     XK_r,      xrdb,           {.v = NULL } },
+	{ MODKEY|MODKEY2, 		XK_e,      movetoedge,       {.v = "-1 1" } },
+	{ MODKEY|MODKEY2, 		XK_d,      movetoedge,       {.v = "0 1" } },
+	{ MODKEY|MODKEY2, 		XK_n,      movetoedge,       {.v = "1 1" } },
+	{ MODKEY|MODKEY2, 		XK_l,      movetoedge,       {.v = "-1 0" } },
+	{ MODKEY|MODKEY2, 		XK_b,      movetoedge,       {.v = "0 0" } },
+	{ MODKEY|MODKEY2, 		XK_r,      movetoedge,       {.v = "1 0" } },
+	{ MODKEY|MODKEY2, 		XK_h,      movetoedge,       {.v = "-1 -1" } },
+	{ MODKEY|MODKEY2, 		XK_u,      movetoedge,       {.v = "0 -1" } },
+	{ MODKEY|MODKEY2, 		XK_p,      movetoedge,       {.v = "1 -1" } },
 	TAGKEYS(                        XK_1,                      0)
 	TAGKEYS(                        XK_2,                      1)
 	TAGKEYS(                        XK_3,                      2)
@@ -168,6 +198,25 @@ static Key keys[] = {
 	TAGKEYS(                        XK_9,                      8)
 	{ MODKEY|ShiftMask,             XK_BackSpace, quit,        {0} },
 	{ MODKEY|ControlMask|ShiftMask, XK_q,      quit,           {1} }, 
+	{ MODKEY,                       XK_s,        			spawn, {.v = doff } },
+	{ MODKEY,                       XK_c,        			spawn, {.v = lock } },
+	{ MODKEY,                       XK_w,        			spawn, {.v = browser } },
+	{ MODKEY|ShiftMask,		XK_s,        			spawn, {.v = spotify } },
+	{ MODKEY|ShiftMask,		XK_d,        			spawn, {.v = discord } },
+	{ MODKEY,			XK_n,        			spawn, {.v = thunar } },
+	{ MODKEY|ShiftMask,		XK_p,        			spawn, {.v = pavucontrol } },
+	{ 0,                            XF86XK_AudioLowerVolume,        spawn, {.v = downvol } },
+	{ MODKEY,                       XF86XK_AudioLowerVolume,        spawn, {.v = downvol1 } },
+	{ 0,                            XF86XK_AudioMute,               spawn, {.v = mutevol } },
+	{ 0,                            XF86XK_AudioRaiseVolume,        spawn, {.v = upvol } },
+	{ MODKEY,                       XF86XK_AudioRaiseVolume,        spawn, {.v = upvol1 } },
+	{ 0,                            XF86XK_MonBrightnessUp,         spawn, {.v = lightup } },
+	{ 0,                            XF86XK_MonBrightnessDown,       spawn, {.v = lightdown } },
+	{ ShiftMask,                    XF86XK_MonBrightnessUp,         spawn, {.v = lightupsec } },
+	{ ShiftMask,                    XF86XK_MonBrightnessDown,       spawn, {.v = lightdownsec } },
+	{ 0,                            XF86XK_AudioPrev, spawn, {.v = aprev } },
+	{ 0,                            XF86XK_AudioPlay, spawn, {.v = aplay } },
+	{ 0,                            XF86XK_AudioNext, spawn, {.v = anext } },
 };
 
 /* button definitions */
diff --git a/dwm.c b/dwm.c
index 4465af1..626e073 100644
--- a/dwm.c
+++ b/dwm.c
@@ -1864,7 +1864,7 @@
 	wa.cursor = cursor[CurNormal]->cursor;
 	wa.event_mask = SubstructureRedirectMask|SubstructureNotifyMask
 		|ButtonPressMask|PointerMotionMask|EnterWindowMask
-		|LeaveWindowMask|StructureNotifyMask|PropertyChangeMask;
+		|LeaveWindowMask|StructureNotifyMask|PropertyChangeMask|KeyPressMask;
 	XChangeWindowAttributes(dpy, root, CWEventMask|CWCursor, &wa);
 	XSelectInput(dpy, root, wa.event_mask);
 	grabkeys();
