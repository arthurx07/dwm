diff --git a/config.def.h b/config.def.h
index 887c139..c4e50b9 100644
--- a/config.def.h
+++ b/config.def.h
@@ -1,22 +1,25 @@
 /* See LICENSE file for copyright and license details. */
 
+/* imports */
+#include <X11/XF86keysym.h>
+
 /* appearance */
-static const unsigned int borderpx  = 1;        /* border pixel of windows */
+static const unsigned int borderpx  = 0;        /* border pixel of windows */
 static const unsigned int snap      = 32;       /* snap pixel */
 static const unsigned int gappih    = 20;       /* horiz inner gap between windows */
-static const unsigned int gappiv    = 10;       /* vert inner gap between windows */
-static const unsigned int gappoh    = 10;       /* horiz outer gap between windows and screen edge */
-static const unsigned int gappov    = 30;       /* vert outer gap between windows and screen edge */
-static const int swallowfloating    = 0;        /* 1 means swallow floating windows by default */
+static const unsigned int gappiv    = 20;       /* vert inner gap between windows */
+static const unsigned int gappoh    = 60;       /* horiz outer gap between windows and screen edge */
+static const unsigned int gappov    = 60;       /* vert outer gap between windows and screen edge */
+static const int swallowfloating    = 1;        /* 1 means swallow floating windows by default */
 static       int smartgaps          = 0;        /* 1 means no outer gap when there is only one window */
-static const int showbar            = 1;        /* 0 means no bar */
+static const int showbar            = 0;        /* 0 means no bar */
 static const int topbar             = 1;        /* 0 means bottom bar */
-static const int vertpad            = 10;       /* vertical padding of bar */
-static const int sidepad            = 10;       /* horizontal padding of bar */
-static const int horizpadbar        = 2;        /* horizontal padding for statusbar */
-static const int vertpadbar         = 0;        /* vertical padding for statusbar */
-static const char *fonts[]          = { "monospace:size=10" };
-static const char dmenufont[]       = "monospace:size=10";
+static const int vertpad            = 17;       /* vertical padding of bar */
+static const int sidepad            = 60;       /* horizontal padding of bar */
+static const int horizpadbar        = 0;        /* horizontal padding for statusbar */
+static const int vertpadbar         = 10;        /* vertical padding for statusbar */
+static const char *fonts[]          = { "Liberation Sans:style=Bold:pixelsize=15", "Symbols Nerd Font Mono:size=10", "Noto Color Emoji:size=10", "monospace:size=10" };
+static const char dmenufont[]       = { "Liberation Sans:style=Bold:pixelsize=15" }; /* , "Symbols Nerd Font Mono:size=8", "Noto Color Emoji:size=8", "monospace:size=10" }; */
 static char normbgcolor[]           = "#222222";
 static char normbordercolor[]       = "#444444";
 static char normfgcolor[]           = "#bbbbbb";
@@ -66,10 +69,10 @@ static char *colors[][3] = {
 /* tagging */
 static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };
 
-static const unsigned int ulinepad	= 5;	/* horizontal padding between the underline and tag */
-static const unsigned int ulinestroke	= 2;	/* thickness / height of the underline */
-static const unsigned int ulinevoffset	= 0;	/* how far above the bottom of the bar the line should appear */
-static const int ulineall 		= 0;	/* 1 to show underline on all tags, 0 for just the active ones */
+static const unsigned int ulinepad	= 5;	/* horizontal padding between the underline and tag */
+static const unsigned int ulinestroke	= 3;	/* thickness / height of the underline */
+static const unsigned int ulinevoffset	= 4;	/* how far above the bottom of the bar the line should appear */
+static const int ulineall 		= 0;	/* 1 to show underline on all tags, 0 for just the active ones */
 
 /* Lockfile */
 static char lockfile[] = "/tmp/dwm.lock";
@@ -80,9 +83,14 @@ static const Rule rules[] = {
 	 *	WM_NAME(STRING) = title
 	 */
 	/* class     instance  title           tags mask  isfloating  isterminal  noswallow  monitor */
-	{ "Gimp",    NULL,     NULL,           0,         1,          0,           0,        -1 },
-	{ "Firefox", NULL,     NULL,           1 << 8,    0,          0,          -1,        -1 },
-	{ "St",      NULL,     NULL,           0,         0,          1,           0,        -1 },
+	{ "st-256color", NULL, NULL,           0,         0,          1,           0,        -1 },
+	/* Floating rules */
+	{ "Wpg",     NULL,     NULL,           0,         1,          0,           0,        -1 },
+	{ "Pavucontrol", NULL, NULL,           0,         1,          0,           0,        -1 },
+	{ "qpwgraph", "qpwgraph", NULL,        0,         1,          0,           0,        -1 },
+	{ NULL,      "qalculate-gtk", NULL,    0,         1,          0,           0,        -1 },
+	/* Tags rules */ /* 0 -> primary monitor, 1 -> secondary monitor, -1 -> focused monitor */
+	{ "st-256color", NULL, "emerge",       1 << 6,    0,          0,           0,        -1 },
 	{ NULL,      NULL,     "Event Tester", 0,         0,          0,           1,        -1 }, /* xev */
 };
 
@@ -99,13 +107,13 @@ static const Layout layouts[] = {
 	/* symbol     arrange function */
 	{ "[]=",      tile },    /* first entry is default */
 	{ "[M]",      monocle },
-	{ "[@]",      spiral },
-	{ "[\\]",     dwindle },
 	{ "H[]",      deck },
 	{ "TTT",      bstack },
+	{ "###",      nrowgrid },
+	{ "[@]",      spiral },
+	{ "[\\]",     dwindle },
 	{ "===",      bstackhoriz },
 	{ "HHH",      grid },
-	{ "###",      nrowgrid },
 	{ "---",      horizgrid },
 	{ ":::",      gaplessgrid },
 	{ "|M|",      centeredmaster },
@@ -115,7 +123,8 @@ static const Layout layouts[] = {
 };
 
 /* key definitions */
-#define MODKEY Mod1Mask
+#define MODKEY Mod4Mask
+#define MODKEY2 ControlMask
 #define TAGKEYS(KEY,TAG) \
 	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
 	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
@@ -126,8 +135,23 @@ static const Layout layouts[] = {
 #define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }
 
 /* commands */
-static const char *dmenucmd[] = { "dmenu_run", "-fn", dmenufont, "-nb", normbgcolor, "-nf", normfgcolor, "-sb", selbordercolor, "-sf", selfgcolor, NULL };
+static const char *dmenucmd[] = { "dmenu_run", "-i", NULL }; /* -i for case insensitive */
 static const char *termcmd[]  = { "st", NULL };
+/* volume */
+static const char *upvol[] = { "/home/tur/.local/bin/kvolume", "-i", "5", NULL };
+static const char *upvol1[] = { "/home/tur/.local/bin/kvolume", "-i", "1", NULL };
+static const char *downvol[] = { "/home/tur/.local/bin/kvolume", "-d", "5", NULL };
+static const char *downvol1[] = { "/home/tur/.local/bin/kvolume", "-d", "1", NULL };
+static const char *mutevol[] = { "/home/tur/.local/bin/kmute", NULL };
+/* backlight */
+static const char *lightup[] = { "/home/tur/.local/bin/klight", "+10%", NULL };
+static const char *lightdown[] = { "/home/tur/.local/bin/klight", "10%-", NULL };
+static const char *lightupsec[] = { "/home/tur/.local/bin/klight", "+10%", "secondary", NULL };
+static const char *lightdownsec[] = { "/home/tur/.local/bin/klight", "10%-", "secondary", NULL };
+/* player */
+static const char *aprev[] = { "/usr/bin/playerctl", "previous", NULL };
+static const char *aplay[] = { "/home/tur/.local/bin/play-pause", NULL };
+static const char *anext[] = { "/usr/bin/playerctl", "next", NULL };
 
 #include "movestack.c"
 static const Key keys[] = {
@@ -168,8 +192,9 @@ static const Key keys[] = {
 	{ MODKEY|ShiftMask,             XK_backslash, shiftviewclients, { .i = -1 } },
 	{ MODKEY|ShiftMask,             XK_c,      killclient,     {0} },
 	{ MODKEY,                       XK_t,      setlayout,      {.v = &layouts[0]} },
-	{ MODKEY,                       XK_f,      setlayout,      {.v = &layouts[1]} },
-	{ MODKEY,                       XK_m,      setlayout,      {.v = &layouts[2]} },
+	{ MODKEY,                       XK_f,      setlayout,      {.v = &layouts[13]} },
+	{ MODKEY,                       XK_m,      setlayout,      {.v = &layouts[1]} },
+	{ MODKEY,                       XK_a,      focusmaster,    {0} },
 	{ MODKEY|ControlMask,		XK_comma,  cyclelayout,    {.i = -1 } },
 	{ MODKEY|ControlMask,           XK_period, cyclelayout,    {.i = +1 } },
 	{ MODKEY,                       XK_space,  setlayout,      {0} },
@@ -182,7 +207,7 @@ static const Key keys[] = {
 	{ MODKEY,                       XK_period, focusmon,       {.i = +1 } },
 	{ MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
 	{ MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
-	{ MODKEY,                       XK_F5,     xrdb,           {.v = NULL } },
+	{ MODKEY|MODKEY2|ShiftMask,     XK_r,      xrdb,           {.v = NULL } },
 	TAGKEYS(                        XK_1,                      0)
 	TAGKEYS(                        XK_2,                      1)
 	TAGKEYS(                        XK_3,                      2)
@@ -194,6 +219,18 @@ static const Key keys[] = {
 	TAGKEYS(                        XK_9,                      8)
 	{ MODKEY|ShiftMask,             XK_q,      quit,           {0} },
 	{ MODKEY|ControlMask|ShiftMask, XK_q,      quit,           {1} },
+	{ 0,                            XF86XK_AudioRaiseVolume, spawn, {.v = upvol } },
+	{ MODKEY,                       XF86XK_AudioRaiseVolume, spawn, {.v = upvol1 } },
+	{ 0,                            XF86XK_AudioMute,        spawn, {.v = mutevol } },
+	{ 0,                            XF86XK_AudioLowerVolume, spawn, {.v = downvol } },
+	{ MODKEY,                       XF86XK_AudioLowerVolume, spawn, {.v = downvol1 } },
+	{ 0,                            XF86XK_MonBrightnessUp,  spawn, {.v = lightup } },
+	{ 0,                            XF86XK_MonBrightnessDown, spawn, {.v = lightdown } },
+	{ ShiftMask,                    XF86XK_MonBrightnessUp,  spawn, {.v = lightupsec } },
+	{ ShiftMask,                    XF86XK_MonBrightnessDown, spawn, {.v = lightdownsec } },
+	{ 0,                            XF86XK_AudioPrev, spawn, {.v = aprev } },
+	{ 0,                            XF86XK_AudioPlay, spawn, {.v = aplay } },
+	{ 0,                            XF86XK_AudioNext, spawn, {.v = anext } },
 };
 
 /* button definitions */
