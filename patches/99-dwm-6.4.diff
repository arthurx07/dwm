diff --git a/config.def.h b/config.def.h
index d921cb5..f0a91eb 100644
--- a/config.def.h
+++ b/config.def.h
@@ -1,19 +1,22 @@
 /* See LICENSE file for copyright and license details. */
 
+/* imports */
+#include <X11/XF86keysym.h>
+
 /* appearance */
-static const unsigned int borderpx  = 1;        /* border pixel of windows */
+static const unsigned int borderpx  = 0;        /* border pixel of windows */
 static const unsigned int snap      = 32;       /* snap pixel */
 static const unsigned int gappih    = 20;       /* horiz inner gap between windows */
-static const unsigned int gappiv    = 10;       /* vert inner gap between windows */
-static const unsigned int gappoh    = 10;       /* horiz outer gap between windows and screen edge */
+static const unsigned int gappiv    = 20;       /* vert inner gap between windows */
+static const unsigned int gappoh    = 30;       /* horiz outer gap between windows and screen edge */
 static const unsigned int gappov    = 30;       /* vert outer gap between windows and screen edge */
 static       int smartgaps          = 0;        /* 1 means no outer gap when there is only one window */
 static const int showbar            = 1;        /* 0 means no bar */
 static const int topbar             = 1;        /* 0 means bottom bar */
-static const int vertpad            = 10;       /* vertical padding of bar */
-static const int sidepad            = 10;       /* horizontal padding of bar */
-static const char *fonts[]          = { "monospace:size=10" };
-static const char dmenufont[]       = "monospace:size=10";
+static const int vertpad            = 5;       /* vertical padding of bar */
+static const int sidepad            = 30;       /* horizontal padding of bar */
+static const char *fonts[]          = { "Liberation Sans:style=Bold:pixelsize=14", "Symbols Nerd Font Mono:size=8", "Noto Color Emoji:size=8", "monospace:size=10" };
+static const char dmenufont[]       = { "Liberation Sans:style=Bold:pixelsize=14", "Symbols Nerd Font Mono:size=8", "Noto Color Emoji:size=8", "monospace:size=10" };
 static char normbgcolor[]           = "#222222";
 static char normbordercolor[]       = "#444444";
 static char normfgcolor[]           = "#bbbbbb";
@@ -38,8 +41,29 @@ static const Rule rules[] = {
 	 *	WM_NAME(STRING) = title
 	 */
 	/* class      instance    title       tags mask     isfloating   monitor */
-	{ "Gimp",     NULL,       NULL,       0,            1,           -1 },
-	{ "Firefox",  NULL,       NULL,       1 << 8,       0,           -1 },
+	/* floating rules */
+	{ "Thunar",   NULL,       NULL,       0,            1,           -1 },
+	{ "Wpg",      NULL,       NULL,       0,            1,           -1 },
+	{ "Pavucontrol", NULL,    NULL,       0,            1,           -1 },
+	{ "System-config-printer.py", NULL, NULL, 0,        1,           -1 },
+	{ "st-256color", NULL, "pomo",        0,            1,           -1 },
+	{ "qpwgraph", "qpwgraph", NULL,       0,            1,           -1 },
+	{ NULL, "qalculate-gtk", NULL,        0,            1,           -1 },
+	{ "Gnome-sudoku", NULL, NULL,         0,            1,           -1 },
+	{ "Gnome-mines", NULL, NULL,          0,            1,           -1 },
+	{ NULL, NULL, "cmus-cover-art",       0,            1,           -1 },
+	/* tags rules */
+	{ "Houdoku",  NULL,       NULL,       1 << 2,       0,           -1 },
+	{ "komikku",  NULL,       NULL,       1 << 2,       0,           -1 },
+	{ "Trackma-gtk", NULL,    NULL,       1 << 2,       1,           -1 },
+	{ "Steam",    NULL,       NULL,       1 << 3,       0,           -1 },
+	{ "dotnet",   NULL,       "osu!",     1 << 3,       0,           -1 },
+	{ "st-256color", NULL,    "emerge",   1 << 6,       1,           -1 },
+	{ "discord",  NULL,       NULL,       1 << 7,       0,            1 },
+	{ "Spotify",  NULL,       NULL,       1 << 8,       0,            1 }, /* 0 -> primary monitor, 1 -> secondary monitor, -1 -> focused monitor */
+	{ "broken",   "broken",   NULL,       1 << 8,       0,            1 }, /* spotify starts up with no window title, neither class / instance */
+	{ "amberol",  NULL,       NULL,       1 << 8,       1,            1 },
+	{ NULL,       NULL,       "Event Tester", 0,        0,            -1 }, /* xev */
 };
 
 /* layout(s) */
@@ -71,7 +95,8 @@ static const Layout layouts[] = {
 };
 
 /* key definitions */
-#define MODKEY Mod1Mask
+#define MODKEY Mod4Mask
+#define MODKEY2 Mod1Mask
 #define TAGKEYS(KEY,TAG) \
 	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
 	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
@@ -82,8 +107,23 @@ static const Layout layouts[] = {
 #define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }
 
 /* commands */
-static const char *dmenucmd[] = { "dmenu_run", "-fn", dmenufont, "-nb", normbgcolor, "-nf", normfgcolor, "-sb", selbordercolor, "-sf", selfgcolor, NULL };
+static const char *dmenucmd[] = { "dmenu_run", "-i", NULL }; /* -i for case insensitive */
 static const char *termcmd[]  = { "st", NULL };
+/* volume */
+static const char *upvol[] = { "/home/kumao/.local/bin/kvolume", "-i", "5", NULL };
+static const char *upvol1[] = { "/home/kumao/.local/bin/kvolume", "-i", "1", NULL };
+static const char *downvol[] = { "/home/kumao/.local/bin/kvolume", "-d", "5", NULL };
+static const char *downvol1[] = { "/home/kumao/.local/bin/kvolume", "-d", "1", NULL };
+static const char *mutevol[] = { "/home/kumao/.local/bin/kmute", NULL };
+/* backlight */
+static const char *lightup[] = { "/home/kumao/.local/bin/klight", "+10%", NULL };
+static const char *lightdown[] = { "/home/kumao/.local/bin/klight", "10%-", NULL };
+static const char *lightupsec[] = { "/home/kumao/.local/bin/klight", "+10%", "secondary", NULL };
+static const char *lightdownsec[] = { "/home/kumao/.local/bin/klight", "10%-", "secondary", NULL };
+/* player */
+static const char *aprev[] = { "/usr/bin/playerctl", "previous", NULL };
+static const char *aplay[] = { "/home/kumao/.local/bin/play-pause", NULL };
+static const char *anext[] = { "/usr/bin/playerctl", "next", NULL };
 
 #include "movestack.c"
 static const Key keys[] = {
@@ -124,8 +164,8 @@ static const Key keys[] = {
 	{ MODKEY|ShiftMask,             XK_backslash, shiftviewclients, { .i = -1 } },
 	{ MODKEY|ShiftMask,             XK_c,      killclient,     {0} },
 	{ MODKEY,                       XK_t,      setlayout,      {.v = &layouts[0]} },
-	{ MODKEY,                       XK_f,      setlayout,      {.v = &layouts[1]} },
-	{ MODKEY,                       XK_m,      setlayout,      {.v = &layouts[2]} },
+	{ MODKEY,                       XK_m,      setlayout,      {.v = &layouts[1]} },
+	{ MODKEY,                       XK_f,      setlayout,      {.v = &layouts[2]} },
 	{ MODKEY|ControlMask,		XK_comma,  cyclelayout,    {.i = -1 } },
 	{ MODKEY|ControlMask,           XK_period, cyclelayout,    {.i = +1 } },
 	{ MODKEY,                       XK_space,  setlayout,      {0} },
@@ -138,7 +178,7 @@ static const Key keys[] = {
 	{ MODKEY,                       XK_period, focusmon,       {.i = +1 } },
 	{ MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
 	{ MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
-	{ MODKEY,                       XK_F5,     xrdb,           {.v = NULL } },
+	{ MODKEY|MODKEY2|ShiftMask,     XK_r,      xrdb,           {.v = NULL } },
 	TAGKEYS(                        XK_1,                      0)
 	TAGKEYS(                        XK_2,                      1)
 	TAGKEYS(                        XK_3,                      2)
@@ -150,6 +190,18 @@ static const Key keys[] = {
 	TAGKEYS(                        XK_9,                      8)
 	{ MODKEY|ShiftMask,             XK_q,      quit,           {0} },
 	{ MODKEY|ControlMask|ShiftMask, XK_q,      quit,           {1} },
+	{ 0,                            XF86XK_AudioRaiseVolume, spawn, {.v = upvol } },
+	{ MODKEY,                       XF86XK_AudioRaiseVolume, spawn, {.v = upvol1 } },
+	{ 0,                            XF86XK_AudioMute,        spawn, {.v = mutevol } },
+	{ 0,                            XF86XK_AudioLowerVolume, spawn, {.v = downvol } },
+	{ MODKEY,                       XF86XK_AudioLowerVolume, spawn, {.v = downvol1 } },
+	{ 0,                            XF86XK_MonBrightnessUp,  spawn, {.v = lightup } },
+	{ 0,                            XF86XK_MonBrightnessDown, spawn, {.v = lightdown } },
+	{ ShiftMask,                    XF86XK_MonBrightnessUp,  spawn, {.v = lightupsec } },
+	{ ShiftMask,                    XF86XK_MonBrightnessDown, spawn, {.v = lightdownsec } },
+	{ 0,                            XF86XK_AudioPrev, spawn, {.v = aprev } },
+	{ 0,                            XF86XK_AudioPlay, spawn, {.v = aplay } },
+	{ 0,                            XF86XK_AudioNext, spawn, {.v = anext } },
 };
 
 /* button definitions */
