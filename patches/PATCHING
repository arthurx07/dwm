How to maintain dwm configuration and customization in git

Customizations can be managed directly in git.
The concept

By recording changes and applied patches as commits in a special branch they can be rebased on top of the master branch when required.
Cloning the repository

You need to have the Git VCS installed first. Then clone the upstream repository locally

git clone git://git.suckless.org/dwm

Recording customizations

Create a special branch where all the customizations will be kept. It doesn't matter what the name is, it just needs to be something different than master.

git branch my_dwm

Now switch to the new branch. This will do nothing at the moment as the branches are the same.

git checkout my_dwm

Now make your changes. If you want to apply one of the contributed patches you can use the git apply command

git apply some_patch.diff

Note that many patches make changes config.def.h instead of config.h. Either move those changes also to config.h, or add rm config.h to the clean target in the Makefile.

Then record the changes as commits

# tell git to add the changes in the given file(s) to be recorded
git add some_file.ext
# git will ask you to provide a message describing your changes,
# while showing a diff of what's being commited.
git commit -v

Experimenting with different combinations of customizations

If you plan on experimenting with different combinations of customizations it might be easier to record the commits in separate feature branches by first creating and checking out a branch and then recording the changes as commits. Having patches in different branches also helps to keep their dependencies transparent by creating branches based on other patch branches.

Then merge the selected combination of changes into your branch

git merge some_feature_branch
git merge other_feature_branch

If you some conflicts occur, resolve them and then record the changes and commit the result. git mergetool can help with resolving the conflicts.
Updating customizations after new release

When the time comes to update your customizations after a new release of dwm or when the dwm repository contains a commit fixing some bug, you first pull the new upstream changes into the master branch

git checkout master
git pull

Then rebase your customization branch on top of the master branch

git checkout my_dwm
git rebase --preserve-merges master

The --preserve-merges option ensures that you don't have to resolve conflicts which you have already resolved while performing merges again.

In case there are merge conflicts anyway, resolve them (possibly with the help of git mergetool), then record them as resolved and let the rebase continue

git add resolved_file.ext
git rebase --continue

If you want to give up, you can always abort the rebase

git rebase --abort

Author

    OndÅ™ej Grover

-------------------------------------------------------------------------------------------------------------------------------------------------------------

Hacking
Copying/license

We only accept contributions from individuals, not corporate entities. See the project LICENSE file you're contributing to.
Debugging

If you find any crashes, please send a full backtrace to the dedicated mailing list. You can create backtraces with gdb:

Before starting a program, you may have to allow core file creation. It is recommended that you put this in your profile:

$ ulimit -c unlimited

Then start the program as usual.

After the program crashes, do the following:

$ gdb -q `which program` /path/to/core
gdb> bt full

If you encounter freezes (no crash at all) of the program, you can debug as follows:

$ gdb -q `which program` --attach `pgrep -o  program`
gdb> bt full

Send the output of that command to the mailing list along with the output of program -v! Thank you!
Patches

There are two types of patches: The ones that fit to your personal taste and the ones you think should be included in mainline.

For patches that fit your personal taste and you want to share with the community, please follow the instructions on the wiki page on how to edit the pages you see here.

For patches that should be included in mainline see the community page and the hackers@ mailing list. Please note that only patches to be included in mainline repos are to be submitted to this list, customisation patches are to be submitted to the wiki!

Please provide a clear concise "commit message" for your patches.

The following instructions are a general guide on how to generate and apply patches posted on this wiki:
patch filename format

The expected format for patches is:

For git revisions:

toolname-patchname-YYYYMMDD-SHORTHASH.diff
dwm-allyourbase-20160617-3465bed.diff

The YYYYMMDD date should correspond to the last time the patch has been modified. The SHORTHASH here is the seven chars git commit short hash corresponding to the last commit of the tool on which the patch can be applied correctly and is working with. You can get it by taking the first seven chars of the full hash or for example:

git rev-parse --short <commit-id> (with commit-id: HEAD, commit hash, etc.)

For release versions:

toolname-patchname-RELEASE.diff
dwm-allyourbase-6.1.diff

The RELEASE should correspond to the tool release version, ie 6.1 for dwm-6.1.
diff generation

For git users:

cd program-directory
git add filechanges...
git commit (write a clear patch description)
git format-patch --stdout HEAD^ > toolname-patchname-YYYYMMDD-SHORTHASH.diff

For tarballs:

cd modified-program-directory/..
diff -up original-program-directory modified-program-directory > \
           toolname-patchname-RELEASE.diff

Don't push multiple commits patchsets. A single patch should apply all changes using patch -p1.
patch program

For git users, use -3 to fix the conflict easily:

cd program-directory
git apply path/to/patch.diff

For patches formatted with git format-patch:

cd program-directory
git am path/to/patch.diff

For tarballs:

cd program-directory
patch -p1 < path/to/patch.diff


